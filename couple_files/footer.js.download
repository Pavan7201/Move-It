'use strict';

const markersToLocations = function(markers) {
    let tempLocations = []
    markers.forEach(function(marker) {
        let temp = {}
        temp.lat = marker.position.lat()
        temp.lng = marker.position.lng()
        tempLocations.push(temp);
    })
    return tempLocations;
}

var mapOffset = {
    x: document.getElementsByClassName('map__content')[0].offsetWidth * 0.66,
    y: 0
}

window.onload = function() {
    if (window.innerWidth < 960) {
        mapOffset = {
            x: 0,
            y: -50
        }
    } else {
    }
    setNewMapCenter()
}

function setNewMapCenter() {
    setTimeout(function() {
        try {
            newMapCenter(map, markersToLocations(markers_map), mapOffset);
        } catch (error) {}

        try {
            newMapCenter(map_offices, markersToLocations(markers_map_offices), mapOffset);
        } catch (error) {}

        try {
            newMapCenter(map_location, markersToLocations(markers_map_location), mapOffset);
        } catch (error) {}
    }, 1000); //stupid but works, CI gmaps library initializes map instance on document.load and initializing takes ~.1s
}



//------------------------------------------------------------------------------------

function newMapCenter(gmap, locations, mapOffset) {

    //console.log(gmap.getProjection().fromLatLngToPoint(gmap.center))


    const TILE_SIZE = {
        height: 256,
        width: 256
    }; // google World tile size, as of v3.22
    const ZOOM_MAX = 16; // max google maps zoom level, as of v3.22
    const BUFFER = 80; // edge buffer for fitting markers within viewport bounds

    const mapOptions = {
        zoom: 15,
        center: {
            lat: -37.8945,
            lng: -145.074

        },
        options: {
            mapTypeControl: false
        }
    };

    var myLatlng = new google.maps.LatLng(-37.8945, 145.074)

    // const markers = [];
    const mapDimensions = {};
    const mapEl = document.getElementsByClassName('map__body')[0];
    //const overlayEl = document.getElementById('overlay');
    //const gmap = new google.maps.Map(mapEl, mapOptions);

    const updateMapDimensions = () => {
        mapDimensions.height = mapEl.offsetHeight;
        mapDimensions.width = mapEl.offsetWidth;
    };

    const getBoundsZoomLevel = (bounds, dimensions) => {
        const latRadian = lat => {
            let sin = Math.sin(lat * Math.PI / 180);
            let radX2 = Math.log((1 + sin) / (1 - sin)) / 2;
            return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;
        };
        const zoom = (mapPx, worldPx, fraction) => {
            return Math.floor(Math.log(mapPx / worldPx / fraction) / Math.LN2);
        };
        const ne = bounds.getNorthEast();
        const sw = bounds.getSouthWest();
        const latFraction = (latRadian(ne.lat()) - latRadian(sw.lat())) / Math.PI;
        const lngDiff = ne.lng() - sw.lng();
        const lngFraction = ((lngDiff < 0) ? (lngDiff + 360) : lngDiff) / 360;
        const latZoom = zoom(dimensions.height, TILE_SIZE.height, latFraction);
        const lngZoom = zoom(dimensions.width, TILE_SIZE.width, lngFraction);
        return Math.min(latZoom, lngZoom, ZOOM_MAX);
    };

    const getBounds = function(locations) {
        let northeastLat;
        let northeastLong;
        let southwestLat;
        let southwestLong;
        locations.forEach(function(location) {
            if (!northeastLat) {
                northeastLat = southwestLat = location.lat;
                southwestLong = northeastLong = location.lng;
                return;
            }
            if (location.lat > northeastLat) northeastLat = location.lat;
            else if (location.lat < southwestLat) southwestLat = location.lat;
            if (location.lng < northeastLong) northeastLong = location.lng;
            else if (location.lng > southwestLong) southwestLong = location.lng;
        });
        const northeast = new google.maps.LatLng(northeastLat, northeastLong);
        const southwest = new google.maps.LatLng(southwestLat, southwestLong);
        const bounds = new google.maps.LatLngBounds();

        bounds.extend(northeast);
        bounds.extend(southwest);
        // console.log('bounds= ' +  bounds )
        // console.log('center' + gmap.center)
        return bounds;

        //console.log('bounds:' + bounds)
    };

    const zoomWithOffset = shouldZoom => {
        const currentzoom = gmap.getZoom();
        const newzoom = shouldZoom ? currentzoom + 1 : currentzoom - 1;
        const offset = {
            x: shouldZoom ? -mapOffset.x / 4 : mapOffset.x / 2,
            y: shouldZoom ? -mapOffset.y / 4 : mapOffset.y / 2
        };

        //console.log(gmap.getCenter);

        const newCenter = offsetLatLng(gmap.getCenter(), offset.x, offset.y);

        if (shouldZoom) {
            gmap.setZoom(newzoom);
            gmap.panTo(newCenter);
        } else {
            gmap.setCenter(newCenter);
            gmap.setZoom(newzoom);
        }


    };

    const setMapBounds = locations => {
        updateMapDimensions();
        const bounds = getBounds(locations);
        const dimensions = {
            width: mapDimensions.width - mapOffset.x - BUFFER * 2,
            height: mapDimensions.height - mapOffset.y - BUFFER * 2
        };
        const zoomLevel = getBoundsZoomLevel(bounds, dimensions);
        gmap.setZoom(zoomLevel);
        setOffsetCenter(bounds.getCenter());
    };

    const offsetLatLng = (latlng, offsetX, offsetY) => {
        offsetX = offsetX || 0;
        offsetY = offsetY || 0;
        const scale = Math.pow(2, gmap.getZoom());

        //console.log('coords: ' + gmap.getProjection().fromLatLngToPoint(latlng))

        const point = gmap.getProjection().fromLatLngToPoint(gmap.center);
        const pixelOffset = new google.maps.Point((offsetX / scale), (offsetY / scale));
        const newPoint = new google.maps.Point(
            point.x - pixelOffset.x,
            point.y + pixelOffset.y
        );
        return gmap.getProjection().fromPointToLatLng(newPoint);
    };

    const setOffsetCenter = latlng => {
        const newCenterLatLng = offsetLatLng(latlng, mapOffset.x / 2, mapOffset.y / 2);
        gmap.panTo(newCenterLatLng);
    };

    setMapBounds(locations);

}
